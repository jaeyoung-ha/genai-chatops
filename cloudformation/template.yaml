AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for API Gateway, S3 and Lambda'

Parameters:
  S3BucketLambdaCode:
    Type: String
    Description: 'S3 bucket containing Lambda code'
  
Resources:
  # S3 Bucket
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-bucket-${AWS::AccountId}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Lambda Function
  FirstLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-gw-to-slack-function'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketLambdaCode
        S3Key: lambda-gw-to-slack.zip
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128
      
  SecondLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-msg-to-slack-function'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketLambdaCode
        S3Key: lambda-message-to-slack.zip
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaRole
      Description: "Lambda execution role with Secrets Manager and Bedrock access"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # API Gateway
  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Method
  RootMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: POST  # 필요한 HTTP 메서드로 변경 가능
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt FirstLambdaFunction.Arn

  # API Gateway Resource
  FirstApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'slack-action'

  FirstApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref FirstApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt FirstLambdaFunction.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        ContentHandling: CONVERT_TO_TEXT
        RequestParameters: {}
        RequestTemplates: 
          "application/x-www-form-urlencoded": |
            #set($payload = $input.body.split("="))
            #set($decodedPayload = $util.urlDecode($payload[1]))
            {
              "body": $decodedPayload
            }
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
      IntegrationResponses:
        - StatusCode: '200'
          ResponseTemplates:
            application/json: '{"message": "Success"}'

  # Lambda Permission for API Gateway
  FirstLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FirstLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*'

# Lambda IAM Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecrets
                  - secretsmanager:UpdateSecret
                  - secretsmanager:CreateSecret
                  - secretsmanager:DeleteSecret
                Resource: '*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: '*'

  # Administrator Role
  AdministratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ChatbotAdminRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # API Gateway Deployment
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - RootMethod
      - FirstApiMethod
    Properties:
      RestApiId: !Ref ApiGateway

  # API Gateway Stage
  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ApiGateway
      StageName: 'prod'

Outputs:
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref S3Bucket
  
  FirstLambdaFunction:
      Value: !GetAtt FirstLambdaFunction.Arn

  FirstApiEndpoint:
    Description: 'First API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/slack-action'
  
  AdministratorRoleName:
    Description: "Administrator Role Name"
    Value: !Ref AdministratorRole